LEGEND:
() in json = choices
*** in json = placeholder



##############                                                                                            ##############
#   Client   #                                                                                            #   Server   #
##############                                                                                            ##############

                            Start of the conversation, the client say hello to the server

{"name":"HelloCommand"}            ----------------------------------------------->

The server says hello to the client. Saying if the lobby is ready to accept players or not, if it is, then the client can
try to join.
If the lobby isn't ready and there is not a first player, the server sends back the  id of the first player, otherwise
the id is set to "NoFirst".
loadedGame is set true if the game is already created, and it's loaded from a save.

                                                                                     {"name":"Hello",
                        <------------------------------------------------            "lobbyReady":(true,false),
                                                                                     "loadedGame":(true, false),
                                                                                     "firstPlayerId":("NoFirst", "***")}

################
# First player #
################

First player (the one who received back the id) tries to join as a first player

Case 1 - "NEW GAME":

First player must specify his name (player), the number of players, his id and the rules (easyRules)

{
"name":"JoinNewAsFirst",
"player":"***",
"numOfPlayers":(2, 3 , 4),         -------------------------------------------------->
"idFirstPlayer":"***",
"easyRule":(false, true)
}

The server respond with a  FirstJoinResponse set to true if the game was created or to false if the game was not.
Note: if is chosen a numOfPlayer not allowed the FirstJoinResponse will be set to false.
If the result is true the first player must wait until all the players join and the game starts.

          <--------------------------------------------------       {"name":"FirstJoinResponse", "result":(true, false)}


################
# Other player #
################

                                    The client tries to join saying his name

{"name":"Join", "player":"***"}    --------------------------------------------------->

The server respond with the result of the try to join and if failed why.
If the result is positive it adds the client id.
Failing reasons:
FullGameException = the game is full/playing. The connection is closed.
NickNameException = this nickname can not be taken try with one of the available with GetLoadedPlayers.
NickNameTakenException = this nickname is already taken, try another one.

                                                                                             {"name":"JoinResponse",
                            <--------------------------------------------------               "result":(true, false),
                                                                                              "id":"***", "error":"***"}


Case 2 - "GAME LOADED":

################
# First player #
################

First player get all the saved games (any player can do it)

{"name":"GetSavedGames"}          -------------------------------------------------->

The server respond with a set of strings

                 <--------------------------------------------------                {"name":"SavedGames", "names":[***]}

First player choose name of a game (game):

{"name":"LoadGame",
"game":"***",                     -------------------------------------------------->
"idFirstPlayer":"***"}

The server respond with a boolean result and an error in case of fail:
Possible errors:
GameLoadException = Internal server error in loading game
GameNameException = The name given doesn't exist
IllegalLobbyException = A game is already loaded or wrong id

                                                                                             {"name":"LoadGameResponse",
                            <--------------------------------------------------                  "result":(true, false),
                                                                                                          "error":"***"}

First player asks for the available players names

{"name":"GetLoadedPlayers"}       -------------------------------------------------->

The server answer with a set strings of names. If game is not loaded an empty set is sent.

                     <--------------------------------------------------     {"name":"LoadedGamePlayers", "names":[***]}

First player join indicating a name(player)

{"name":"JoinLoadedAsFirst",
"player":"***",                 -------------------------------------------------->
"idFirstPlayer":"***"}

The server respond with a FirstJoin response.
                                <--------------------------------------------------                    FirstJoinResponse

Now other players can join:

################
# Other player #
################

Hello                            -------------------------------------------------->
                                 <--------------------------------------------------                     "loadGame":true
GetLoadedPlayers                 -------------------------------------------------->
                                 <--------------------------------------------------                   LoadedGamePlayers
Join                             -------------------------------------------------->
                                 <--------------------------------------------------                        JoinResponse


When full capacity is reached the game starts.


DISCONNECTIONS:

Player tries to disconnect sending his own id.

{"name":"Disconnect", "id":"***"}   -------------------------------------------------->

Notes:
- if the first player disconnect during lobby creation then the lobby is reset.
- if a player disconnects while in lobby, he is just disconnected and his place is now available.
- if a player disconnects during a game he can join again during the same game
- when a game is saved the player is saved as non-disconnected (to load and resume the game all the players must be connected anyway)


RECONNECTION:

A player can reconnect passing his id. All player are notified and all the necessary notification are sent to the
reconnected player in the shown order.

HelloCommand                        -------------------------------------------------->
                                    <--------------------------------------------------                            Hello
{"name":"Reconnect", "id":"***"}    -------------------------------------------------->
                                                       To All Players
                                    <--------------------------------------------------                      Reconnected
                                    <--------------------------------------------------                  BookShelfUpdate
                                                            ...
                                    <--------------------------------------------------                  BookShelfUpdate
                                    <--------------------------------------------------                     PlayerPoints
                                                            ...
                                    <--------------------------------------------------                     PlayerPoints
                                    <--------------------------------------------------                      CommonCards
                                    <--------------------------------------------------                      BoardUpdate
                                    <--------------------------------------------------                       TurnNotify
                                    <--------------------------------------------------                        GameSetUp


PING PONG:
The ping pong is necessary to keep a client alive and make sure he didn't disconnect without notify it.
The disconnection works as mentioned before.
id is player's id or "NoId" if a player hasn't got an id yet.

Every 3 seconds the server send a ping and the client must respond in 3 seconds with a pong, otherwise the client is disconnected.
Upon connection establishment the server has 60 seconds to send the first ping to the client,
otherwise the client will stop and prompt the user to restart.
After the first ping is received the server has 10 seconds to send another ping,
otherwise the client will stop and prompt the user to restart.

##############                                                                                            ##############
#   Client   #                                                                                            #   Server   #
##############                                                                                            ##############

                                   <--------------------------------------------------                   {"name":"Ping"}
{"name":"Pong", "id":"***"}        -------------------------------------------------->


IN GAME:

Client can do three actions:
1) Pick Tiles
2) Put Tiles
3) Save Game and make all leave

##############                                                                                            ##############
#   Client   #                                                                                            #   Server   #
##############                                                                                            ##############

1) Pick Tiles

{"name":"PickTilesCommand",
"id":"***",
"tiles":[                            -------------------------------------------------->
{"x":***, "y":***, "type":"***"},
***
]}


                                                      To all players                              {"name":"TilesPicked",
                                     <--------------------------------------------------           "player":"***"
                                                                                                   "tiles":"[***]"
                                                                                                  }


2) Put Tiles

{"name":"PutTilesCommand",
"id":"***",
"column":***                         -------------------------------------------------->
"tiles":[
"BOOK", ***
]}

                                                      To all players                              {"name":"TilesPicked",
                                     <--------------------------------------------------           "player":"***"
                                                                                                   "tiles":"[]"
                                                                                                  }


3) Save Game with name game
game = name of the game

{"name":"SaveGame",
"game":"***",                        -------------------------------------------------->
"id":***}

No answer from the server. If the game is saved, it sends a notification to everybody.


CHAT:

Every message passes through the server, which then sends them as push notification

##############                                                                                            ##############
#   Client   #                                                                                            #   Server   #
##############                                                                                            ##############

player = receiver, if it is null than the message is sent to all players.
id = sender id

{"name":"SendMessage",
"id":"***",                   -------------------------------------------------->
"message":"***"
"player":"***"}


PUSH NOTIFICATIONS:

Client does not respond to notifications. The right delivery of it relies on the network layer.

##############                                                                                            ##############
#   Server   #                                                                                            #   Client   #
##############                                                                                            ##############

- Sending a message to a client or all of them

{"name":"ChatMessage",
"message":"***",                       -------------------------------------------------->
"sender":"***",
"date":"***"}

- Sending game set up.
players = list of strings of players' names ordered by turn
goals = list of strings of common goals' name
personal = list of personal cards
oldChat = old messages (ChatMessage) from old game or if a player reconnected
Other setting as boards, and considering loaded game settings as bookshelf and points, are sent using other notifications
The client is responsible for handling the stream of notifications correctly, knowing that GameSetUp is the LAST notification he will receive.

{"name":"GameSetUp",
"players":["***", ***],                 -------------------------------------------------->
"goals":["***", ***],
"personal":["***", ***],
"oldChat":[***]
}


- Change in the board (usually after pick/refill)

{"name":"BoardUpdate",
"tiles":[                               -------------------------------------------------->
{"x":***,"y":***,"type":"***"}, ***
]
"added":(true, false)
}


- Change in a bookshelf (usually after put)
player = player name of which the bookshelf is

{"name":"BookShelfUpdate",
"player":"***",
"tiles":[                               -------------------------------------------------->
{"x":***,"y":***,"type":"***"}, ***
]}


- Sending common goals cards with the relative tokens
cardsAndTokens = map<String, List<Integer>> , so map from name to ordered tokens.

{"name":"CommonCards",
"cardsAndTokens":{"c2":[5,3,1], "***":[***]}     -------------------------------------------------->
}

- Disconnection of a player in game

{"name":"Disconnection"                 -------------------------------------------------->
"player":"***"}


- Reconnection of a player in game

{"name":"Reconnected"                   -------------------------------------------------->
"player":"***"}


- Change in player points (of a single player)

{"name":"PlayerPoints"
"player":"***"                           -------------------------------------------------->
"points":***}


- Notification of player turn
It's the client turn if the 'player' in TurnNotify matches his nickname

{"name":"TurnNotify"                   -------------------------------------------------->
"player":"***"}


- Saved game notification, the name of the save is also communicated to the client
game = name of the save

{"name":"GameSaved"
"game":"***"}                          -------------------------------------------------->


- Winner notification
The client is also responsible for closing the connection after the winner notification

{"name":"Winner"                       -------------------------------------------------->
"player":"***"}


- General error message, the client should know how to handle these
{"name":"ErrorMessage",
 "message":"***"}                      -------------------------------------------------->